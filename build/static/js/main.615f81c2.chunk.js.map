{"version":3,"sources":["Todo.js","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","List","class","ListItemAvatar","Avatar","ListItem","ListItemText","primary","todo","secondary","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","todos","setTodos","input","setInput","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","className","FormControl","InputLabel","Input","value","onChange","event","target","Button","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","variant","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAiBeA,MAdf,SAAcC,GACZ,OACE,eAACC,EAAA,EAAD,CAAMC,MAAM,YAAZ,UACE,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,MAGJ,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAcC,QAASP,EAAMQ,KAAMC,UAAU,oB,gDCGtCC,EAZKC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,YCmCRC,MAxCf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,KAqBb,OAhBAC,qBAAU,WAERjB,EAAGkB,WAAW,SAASC,QAAQ,YAAa,QAAQC,YAAW,SAAAC,GAC7DP,EAASO,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,OAAO3B,cAE9C,IAYD,sBAAK4B,UAAU,MAAf,UACE,8CACA,iCACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,uBACA,cAACC,EAAA,EAAD,CAAOC,MAAOf,EAAOgB,SAAU,SAAAC,GAAK,OAAIhB,EAASgB,EAAMC,OAAOH,aAEhE,cAACI,EAAA,EAAD,CAAQC,UAAWpB,EAAOqB,KAAK,SAASC,QAlB9B,SAACL,GAEfA,EAAMM,iBAENtC,EAAGkB,WAAW,SAASqB,IAAI,CACzBzC,KAAMiB,EACNyB,UAAWvC,IAASS,UAAU+B,WAAWC,oBAE3C1B,EAAS,KAUqD2B,QAAQ,YAAYC,MAAM,UAApF,sBACA,6BACC/B,EAAMU,KAAI,SAAAzB,GAAI,OACX,cAAC,EAAD,CAAMA,KAAMA,gBC3BT+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.615f81c2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { List, Avatar, ListItemAvatar, ListItem, ListItemText } from '@material-ui/core';\r\n\r\nfunction Todo(props) {\r\n  return (\r\n    <List class='todo_list'>\r\n      <ListItemAvatar>\r\n          <Avatar>            \r\n          </Avatar>\r\n        </ListItemAvatar>\r\n      <ListItem>        \r\n        <ListItemText primary={props.todo} secondary='By Ramesh' />\r\n      </ListItem>\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default Todo\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyC4Ak7p4aJRg-KXaLd1-N76595cNQk7FeA\",\r\n  authDomain: \"todo-app-raksha.firebaseapp.com\",  \r\n  projectId: \"todo-app-raksha\",\r\n  storageBucket: \"todo-app-raksha.appspot.com\",\r\n  messagingSenderId: \"575194666837\",\r\n  appId: \"1:575194666837:web:b902c756118c9d12cc41dc\",\r\n  measurementId: \"G-0D9Z8HWEEJ\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;","import React, { useState, useEffect } from 'react';\nimport Todo from './Todo';\nimport { Button, FormControl, Input, InputLabel } from '@material-ui/core';\nimport './App.css';\nimport db from './firebase';\nimport firebase from 'firebase';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n\n  // when the app loads, we need to listen to the database and fetch new todos \n  useEffect(()=> {\n    // this code here ... fires when the app.js loads\n    db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => doc.data().todo))\n    })\n  }, []);\n  const addTodo = (event) =>{\n    // This will fire when click the button.\n    event.preventDefault();\n    //setTodos([...todos, input ]);\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    setInput('');\n  }\n  return (\n    <div className=\"App\">\n      <h1>Hello Raksha</h1>\n      <form>\n        <FormControl>\n          <InputLabel>Add Todo</InputLabel>\n          <Input value={input} onChange={event => setInput(event.target.value)} />          \n        </FormControl>\n        <Button disabled={!input} type='submit' onClick={addTodo} variant=\"contained\" color=\"primary\">Add Todo</Button>\n        <ul>\n        {todos.map(todo => (\n            <Todo todo={todo}/>            \n          ))}              \n        </ul>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}